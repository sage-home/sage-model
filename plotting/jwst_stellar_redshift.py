import numpy as np
import matplotlib.pyplot as plt
import h5py as h5
import os
from random import seed, sample

# File details
DirName = './output/millennium_FIRE/'

# Simulation details
Hubble_h = 0.73
FirstSnap = 0
LastSnap = 63
redshifts = [127.000, 79.998, 50.000, 30.000, 19.916, 18.244, 16.725, 15.343, 14.086, 12.941, 11.897, 10.944, 10.073, 
             9.278, 8.550, 7.883, 7.272, 6.712, 6.197, 5.724, 5.289, 4.888, 4.520, 4.179, 3.866, 3.576, 3.308, 3.060, 
             2.831, 2.619, 2.422, 2.239, 2.070, 1.913, 1.766, 1.630, 1.504, 1.386, 1.276, 1.173, 1.078, 0.989, 0.905, 
             0.828, 0.755, 0.687, 0.624, 0.564, 0.509, 0.457, 0.408, 0.362, 0.320, 0.280, 0.242, 0.208, 0.175, 0.144, 
             0.116, 0.089, 0.064, 0.041, 0.020, 0.000]

# Your original data
original_data = """3.1664167916041976, 11.540892193308549
3.2743628185907045, 11.475836431226766
3.4182908545727138, 11.568773234200743
3.6521739130434776, 11.447955390334572
5.037481259370314, 11.345724907063197
5.235382308845577, 11.122676579925649
5.271364317841079, 10.983271375464684
5.109445277361319, 10.973977695167285
5.199400299850074, 10.881040892193308
5.217391304347826, 10.788104089219331
5.217391304347826, 10.788104089219331
5.667166416791604, 10.75092936802974
6.08095952023988, 10.602230483271375
6.152923538230884, 10.490706319702602
6.332833583208395, 10.472118959107807
6.566716641679159, 10.527881040892193
6.602698650674662, 10.425650557620816
6.4947526236881545, 10.434944237918215
6.944527736131934, 10.369888475836431
7.37631184407796, 10.481412639405203
7.05247376311844, 10.565055762081784
6.926536731634182, 10.769516728624534
6.638680659670164, 10.760223048327138
5.991004497751124, 10.741635687732341
6.044977511244377, 10.741635687732341
6.206896551724138, 10.936802973977695
6.260869565217391, 10.992565055762082
6.2968515742128925, 11.066914498141264
6.350824587706147, 11.122676579925649
6.656671664167916, 11.215613382899628
7.124437781109444, 11.308550185873607
7.214392803598201, 10.927509293680297
7.250374812593702, 10.853159851301115
7.520239880059969, 10.360594795539033
7.9880059970014985, 10.276951672862452
7.754122938530734, 10.026022304832713
8.18590704647676, 10.211895910780669
8.581709145427284, 10.555762081784387
8.761619190404796, 10.118959107806692
8.32983508245877, 9.895910780669144
8.599700149925036, 9.87732342007435
9.13943028485757, 9.895910780669144
9.15742128935532, 9.821561338289962
9.409295352323836, 9.812267657992564
9.409295352323836, 9.74721189591078
9.499250374812593, 9.654275092936803
9.661169415292353, 9.78438661710037
9.733133433283356, 9.905204460966543"""

epochs_data = """6.448897795591183, 10.175141242937853
6.881763527054108, 9.54237288135593
6.801603206412826, 9.045197740112993
6.513026052104209, 9.135593220338983
6.721442885771543, 10.661016949152541
6.721442885771543, 10.491525423728813
6.7695390781563125, 10.59322033898305
6.897795591182365, 10.378531073446327
6.897795591182365, 10.75141242937853
7.01002004008016, 10.762711864406779
7.186372745490982, 10.774011299435028
7.170340681362726, 10.649717514124292
7.667334669338677, 10.853107344632768
7.683366733466935, 10.581920903954801
7.523046092184369, 10.480225988700564
7.523046092184369, 10.344632768361581
7.37875751503006, 10.220338983050848
7.523046092184369, 10.209039548022599
7.458917835671343, 10.141242937853107
8.38877755511022, 9.858757062146893
8.06813627254509, 9.180790960451976
8.276553106212425, 8.853107344632768
8.70941883767535, 9.23728813559322
8.741482965931864, 9.564971751412429
8.821643286573146, 9.757062146892654
9.687374749498998, 10.152542372881355
9.735470941883769, 9.666666666666666
9.799599198396795, 9.734463276836157
10.072144288577155, 9.519774011299434
9.81563126252505, 9.350282485875706
10.280561122244489, 9.135593220338983
10.216432865731463, 8.672316384180789
10.521042084168336, 9.406779661016948
10.77755511022044, 9.610169491525422
10.729458917835672, 9.259887005649716
10.889779559118237, 9.214689265536723
11.06613226452906, 9.203389830508474
11.258517034068136, 9.271186440677965
11.098196392785571, 9.395480225988699
11.338677354709418, 9.395480225988699
11.579158316633267, 9.214689265536723
11.51503006012024, 9.180790960451976
11.771543086172345, 9.271186440677965
11.835671342685371, 9.22598870056497
12.07615230460922, 9.338983050847457
12.124248496993989, 9.282485875706215
12.124248496993989, 9.180790960451976
11.739478957915832, 8.887005649717512
11.338677354709418, 8.943502824858756
10.745490981963929, 8.943502824858756
11.01803607214429, 8.864406779661016
11.06613226452906, 8.740112994350282
10.809619238476955, 8.706214689265536
10.857715430861724, 8.672316384180789
10.521042084168336, 8.728813559322033
10.633266533066132, 8.209039548022599
10.857715430861724, 8.344632768361581
11.130260521042086, 8.389830508474574
11.29058116232465, 8.378531073446325
11.354709418837675, 8.378531073446325
11.19438877755511, 8.19774011299435
11.450901803607215, 8.446327683615818
11.51503006012024, 8.525423728813559
11.595190380761522, 8.367231638418078
11.61122244488978, 8.299435028248586
11.819639278557116, 8.299435028248586
11.899799599198397, 8.570621468926554
12.012024048096194, 8.649717514124292
12.092184368737474, 8.220338983050846
12.188376753507015, 8.288135593220337
12.140280561122246, 8.457627118644066
12.428857715430862, 8.401129943502823
12.492985971943888, 8.435028248587571
12.39679358717435, 8.604519774011298
12.653306613226453, 8.90960451977401
12.71743486973948, 8.446327683615818
12.781563126252506, 8.389830508474574
12.861723446893787, 8.141242937853107
13.67935871743487, 8.638418079096045
13.67935871743487, 8.242937853107343
14.3687374749499, 8.129943502824858"""

def read_hdf(snap_num=None, param=None):
    """Read data from SAGE model files"""
    model_files = [f for f in os.listdir(DirName) if f.startswith('model_') and f.endswith('.hdf5')]
    model_files.sort()
    
    combined_data = None
    for model_file in model_files:
        try:
            with h5.File(DirName + model_file, 'r') as f:
                data = np.array(f[snap_num][param])
                combined_data = data if combined_data is None else np.concatenate((combined_data, data))
        except:
            continue
    return combined_data

def plot_simple_scatter():
    """Create simple scatter plot"""
    
    # Parse your original data
    lines = original_data.strip().split('\n')
    obs_z, obs_mass = [], []
    for line in lines:
        z, mass = line.split(', ')
        obs_z.append(float(z))
        obs_mass.append(float(mass))

    # Parse epochs data
    lines = epochs_data.strip().split('\n')
    obs_z_epochs, obs_mass_epochs = [], []
    for line in lines:
        z, mass = line.split(', ')
        obs_z_epochs.append(float(z))
        obs_mass_epochs.append(float(mass))

    # Set up plot
    plt.figure(figsize=(10, 8))
    
    # Plot SAGE data (diluted)
    seed(42)  # For reproducible sampling
    dilute_factor = 7500  # Number of points to show per snapshot
    first_max_mass_plotted = False  # Flag for legend entry

    for snap in range(FirstSnap, LastSnap+1, 1):  # Every 2nd snapshot to reduce clutter
        try:
            snapshot = f'Snap_{snap}'
            stellar_masses = read_hdf(snap_num=snapshot, param='StellarMass') * 1.0e10 / Hubble_h
            halo_masses = read_hdf(snap_num=snapshot, param='Mvir') * 1.0e10 / Hubble_h
            galaxy_types = read_hdf(snap_num=snapshot, param='Type')
            
            # Filter: central galaxies only, mass > 10^8
            mask = (halo_masses > 0) & (stellar_masses > 1e8)
            valid_masses = stellar_masses[mask]
            
            if len(valid_masses) > 10:
                # Dilute the sample
                n_sample = min(dilute_factor, len(valid_masses))
                indices = sample(range(len(valid_masses)), n_sample)
                sample_masses = valid_masses[indices]
                
                # Add small random jitter to redshift for visibility
                z_jitter = redshifts[snap] + np.random.normal(0, 0.02, len(sample_masses))
                
                plt.scatter(z_jitter, np.log10(sample_masses), 
                           alpha=0.15, s=1, color='lightblue', rasterized=True)
                
                # Mark the most massive galaxy in this snapshot
                max_mass = np.max(valid_masses)
                label = 'SAGE 2.0 galaxies' if not first_max_mass_plotted else None
                plt.scatter(redshifts[snap], np.log10(max_mass), 
                           s=300, color='lightblue', marker='*', edgecolors='black', 
                           alpha=0.9, zorder=10, label=label)
                first_max_mass_plotted = True
                           
        except Exception as e:
            print(f"Skipping snapshot {snap}: {e}")
            continue
    
    # Plot your original data
    plt.scatter(obs_z, obs_mass, c='orange', s=75, alpha=0.7, marker='s',
                edgecolors='black', label='COSMOS-Web galaxies', zorder=5)
    plt.scatter(obs_z_epochs, obs_mass_epochs, c='red', s=75, alpha=0.7, marker='d',
                edgecolors='black', label='EPOCHS galaxies', zorder=5)

    # Formatting
    plt.xlabel('Redshift', fontsize=12)
    plt.ylabel(r'$\log_{10}\ M_{star}\ (M_\odot)$', fontsize=12)
    plt.legend(loc='upper right', frameon=False)
    plt.xlim(0, 14)
    plt.ylim(8, 13)
    
    plt.tight_layout()
    # plt.show()
    plt.savefig('sage_stellar_redshift_plot.pdf', dpi=500)
    
    print(f"Plotted SAGE model scatter (diluted) + your {len(obs_z)} data points")

if __name__ == '__main__':
    if not os.path.exists(DirName):
        print(f"Error: Directory {DirName} not found!")
        print("Please update DirName to point to your SAGE output directory.")
    else:
        plot_simple_scatter()