TRANSFORMERS_TEMPLATE = """/**
 * @file {transformers_filename}
 * @brief Auto-generated output transformer dispatch for SAGE model
 *
 * This file is automatically generated from properties.yaml by
 * generate_property_headers.py. DO NOT EDIT DIRECTLY.
 *
 * Generated on: {timestamp}
 */

#include "core_allvars.h"
#include "core_properties.h"
#include "core_property_utils.h"
#include "core_logging.h"
#include <string.h>
#ifdef HDF5
#include <hdf5.h>
#endif

/* Extern declarations for all transformer functions */
{transformer_function_externs}

/**
 * @brief Dispatches to the appropriate output transformer or performs default identity transform.
 * @param galaxy The galaxy being processed.
 * @param output_prop_id Property ID of the field being written to HDF5.
 * @param output_prop_name Name of the field being written to HDF5.
 * @param output_buffer_element_ptr Pointer to the HDF5 buffer slot for this galaxy's property.
 * @param run_params Global run parameters.
 * @param h5_dtype HDF5 data type of the output field.
 * @return 0 on success, non-zero on error.
 */
int dispatch_property_transformer(const struct GALAXY *galaxy,
                                  property_id_t output_prop_id,
                                  const char *output_prop_name,
                                  void *output_buffer_element_ptr,
                                  const struct params *run_params,
                                  hid_t h5_dtype) {{
    int status = 0;
    
    // Auto-generated if/else if chain based on property name
{dispatcher_if_chain}
    else {{
        // Default identity transformation for properties without a transformer
        if (galaxy->properties == NULL) {{
            LOG_ERROR("Galaxy properties is NULL for property '%s'", output_prop_name);
            return -1;
        }}
        
        // This uses the output_prop_id to fetch the raw value
        if (h5_dtype == H5T_NATIVE_FLOAT) {{
            *((float*)output_buffer_element_ptr) = get_float_property(galaxy, output_prop_id, 0.0f);
        }} else if (h5_dtype == H5T_NATIVE_DOUBLE) {{
            *((double*)output_buffer_element_ptr) = get_double_property(galaxy, output_prop_id, 0.0);
        }} else if (h5_dtype == H5T_NATIVE_INT) {{
            *((int32_t*)output_buffer_element_ptr) = get_int32_property(galaxy, output_prop_id, 0);
        }} else if (h5_dtype == H5T_NATIVE_LLONG) {{
            // Assuming int64_t for H5T_NATIVE_LLONG output
            *((int64_t*)output_buffer_element_ptr) = get_int64_property(galaxy, output_prop_id, 0LL);
        }} else {{
            LOG_ERROR("Unsupported HDF5 type for default identity transform of property '%s'", output_prop_name);
            status = -1;
        }}
    }}
    
    return status;
}}
"""